for(noi in c(500)){
for(i in c(11:20)){
print(paste(n,noi,i))
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
y=t( data0$Y )
x = cbind( data0$X1, data0$X2, data0$X1*data0$X2)
b1_sparse = data0$b.sparse
data1 = data.frame(y, x)
res = horseshoe(y,x, method.tau = "halfCauchy", method.sigma = "Jeffreys", burn = 1000, nmc = 3000)
saveRDS(res$BetaHat,file = paste0(path0,"resbetahat_hs",noi,'_n',n,"_",i,".rds"))
}
}
}
path0 = '/Users/ben/desktop/work2/multiresolution/simulation3D/data/'
h=1
for(n in c(1000)){
for(noi in c(500)){
for(i in c(16:20)){
print(paste(n,noi,i))
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
y=t( data0$Y )
x = cbind( data0$X1, data0$X2, data0$X1*data0$X2)
b1_sparse = data0$b.sparse
data1 = data.frame(y, x)
res = horseshoe(y,x, method.tau = "halfCauchy", method.sigma = "Jeffreys", burn = 1000, nmc = 3000)
saveRDS(res$BetaHat,file = paste0(path0,"resbetahat_hs",noi,'_n',n,"_",i,".rds"))
}
}
}
#large simulation
path0 = '/Users/ben/desktop/work2/multiresolution/simulation3D/data/'
h=1
for(n in c(1000)){
for(noi in c(500)){
for(i in c(16:20)){
print(paste(n,noi,i))
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
y=t( data0$Y )
x = cbind( data0$X1, data0$X2, data0$X1*data0$X2)
b1_sparse = data0$b.sparse
data1 = data.frame(y, x)
res = horseshoe(y,x, method.tau = "halfCauchy", method.sigma = "Jeffreys", burn = 1000, nmc = 3000)
saveRDS(res$BetaHat,file = paste0(path0,"resbetahat_hs",noi,'_n',n,"_",i,".rds"))
}
}
}
50/35
800/500
800/600
50/37
50/38
noi = 500
n = 1000
R2 = rep(0,100)
auc = rep(0,100)
auc1 = rep(0,100)
auc2 = rep(0,100)
for(i in 1:100){
res = readRDS(file = paste0(path0,"resbetahat_hs",noi,'_n',n,"_",i,".rds"))
h=1
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
b1_sparse = data0$b.sparse
b = as.numeric( abs(b1_sparse) > 1e-6 )
a = abs( as.numeric(res) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc[i] = tmp$auc
b = as.numeric( abs(b1_sparse[1,1:27648]) > 1e-6 )
a = abs( as.numeric(res[1:27648]) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc1[i] = tmp$auc
b = as.numeric( abs(b1_sparse[1,27649:41472]) > 1e-6 )
a = abs( as.numeric(res[27649:41472]) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc2[i] = tmp$auc
h=2
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
y=t( data0$Y )
x = cbind( data0$X1, data0$X2, data0$X1*data0$X2)
y_est = x %*% res
R2[i] = ( cor(y,y_est) )^2
print(i)
}
print(c(mean(auc),mean(auc1),mean(auc2),mean(R2)))
print(c(sd(auc),sd(auc1),sd(auc2),sd(R2)))
n=1000
noi=1500
R2 = rep(0,100)
auc = rep(0,100)
auc1 = rep(0,100)
auc2 = rep(0,100)
res_list = readRDS(file = paste0(path0,"res_lasso",noi,'_n',n,"_100.rds"))
for(i in 1:100){
h=1
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
b1_sparse = data0$b.sparse
b = as.numeric( abs(b1_sparse) > 1e-6 )
a = abs( as.numeric(res_list[[i]]$beta) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc[i] = tmp$auc
b = as.numeric( abs(b1_sparse[1,1:27648]) > 1e-6 )
a = abs( as.numeric(res_list[[i]]$beta[1:27648]) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc1[i] = tmp$auc
b = as.numeric( abs(b1_sparse[1,27649:41472]) > 1e-6 )
a = abs( as.numeric(res_list[[i]]$beta[27649:41472]) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc2[i] = tmp$auc
h=2
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
y=t( data0$Y )
x = cbind( data0$X1, data0$X2, data0$X1*data0$X2)
y_est = x %*% as.matrix(res_list[[i]]$beta)
R2[i] = ( cor(y,y_est) )^2
print(i)
}
print(c(mean(auc),mean(auc1),mean(auc2),mean(R2)))
print(c(sd(auc),sd(auc1),sd(auc2),sd(R2)))
n=1000
noi=500
R2 = rep(0,100)
auc = rep(0,100)
auc1 = rep(0,100)
auc2 = rep(0,100)
res_list = readRDS(file = paste0(path0,"res_lasso",noi,'_n',n,"_100.rds"))
for(i in 1:100){
h=1
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
b1_sparse = data0$b.sparse
b = as.numeric( abs(b1_sparse) > 1e-6 )
a = abs( as.numeric(res_list[[i]]$beta) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc[i] = tmp$auc
b = as.numeric( abs(b1_sparse[1,1:27648]) > 1e-6 )
a = abs( as.numeric(res_list[[i]]$beta[1:27648]) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc1[i] = tmp$auc
b = as.numeric( abs(b1_sparse[1,27649:41472]) > 1e-6 )
a = abs( as.numeric(res_list[[i]]$beta[27649:41472]) )
data2 = data.frame( b, a)
tmp = roc(b~a, data = data2)
auc2[i] = tmp$auc
h=2
data0 = readMat(paste0(path0,'simdata_noise',noi,'_n',n,'_h',h,'_',i,'.mat') )
y=t( data0$Y )
x = cbind( data0$X1, data0$X2, data0$X1*data0$X2)
y_est = x %*% as.matrix(res_list[[i]]$beta)
R2[i] = ( cor(y,y_est) )^2
print(i)
}
print(c(mean(auc),mean(auc1),mean(auc2),mean(R2)))
print(c(sd(auc),sd(auc1),sd(auc2),sd(R2)))
800/700
50/37
library(R.matlab)
b = readMat(paste0('/users/ben/desktop/work2/multiresolution/sim2new_test2/b1_sparse.mat') )
hist(b)
b[[1]]
hist(b[[1]])
dim(b[[1]])
region = b[[1]]
region = (region!=0)
dim(region)
region1 = region[1,1:900]
dim(region1) = c(30,30)
bound = matrix(0,30,30)
for(i in 1:30){
for(j in 1:30){
if(region1[i,j]==1){
if( ( (i==1)+(i==30)+(j==1)+(j==30) ) >0 ){
bound[i,j]=1
}
else{
add1 = sum(region1[(i-1):(i+1),(j-1):(j+1)])
if( (add1>1)*(add1<9) ){
bound[i,j]=1
}
}
}
}
}
npySave("/Users/ben/desktop/work2/multiresolution/simulation3D/data/bound1.npy", bound )
region1 = region[1,1:900]
dim(region1) = c(30,30)
bound1 = matrix(0,30,30)
for(i in 1:30){
for(j in 1:30){
if(region1[i,j]==1){
if( ( (i==1)+(i==30)+(j==1)+(j==30) ) >0 ){
bound1[i,j]=1
}
else{
add1 = sum(region1[(i-1):(i+1),(j-1):(j+1)])
if( (add1>1)*(add1<9) ){
bound1[i,j]=1
}
}
}
}
}
region2 = region[1,901:1800]
dim(region2) = c(30,30)
bound2 = matrix(0,30,30)
for(i in 1:30){
for(j in 1:30){
if(region2[i,j]==1){
if( ( (i==1)+(i==30)+(j==1)+(j==30) ) >0 ){
bound2[i,j]=1
}
else{
add1 = sum(region2[(i-1):(i+1),(j-1):(j+1)])
if( (add1>1)*(add1<9) ){
bound2[i,j]=1
}
}
}
}
}
bound = ( (bound1 + bound2)!=0 )
npySave("/Users/ben/desktop/work2/multiresolution/simulation3D/data/bound.npy", bound )
b = readMat(paste0('/users/ben/desktop/work2/multiresolution/sim2new_test2/b1_sparse.mat') )
dim(b[[1]])
region = b[[1]]
region = (region!=0)
region1 = region[1,1:900]
dim(region1) = c(30,30)
bound1 = matrix(0,30,30)
for(i in 1:30){
for(j in 1:30){
if(region1[i,j]==1){
if( ( (i==1)+(i==30)+(j==1)+(j==30) ) >0 ){
bound1[i,j]=1
}
else{
add1 = sum(region1[(i-1):(i+1),(j-1):(j+1)])
if( (add1>1)*(add1<9) ){
bound1[i,j]=1
}
}
}
}
}
region2 = region[1,901:1800]
dim(region2) = c(30,30)
bound2 = matrix(0,30,30)
for(i in 1:30){
for(j in 1:30){
if(region2[i,j]==1){
if( ( (i==1)+(i==30)+(j==1)+(j==30) ) >0 ){
bound2[i,j]=1
}
else{
add1 = sum(region2[(i-1):(i+1),(j-1):(j+1)])
if( (add1>1)*(add1<9) ){
bound2[i,j]=1
}
}
}
}
}
bound = ( (bound1 + bound2)!=0 )
library(RcppCNPy)
npySave("/Users/ben/desktop/work2/multiresolution/simulation3D/data/bound.npy", bound )
npySave("/Users/ben/desktop/work2/multiresolution/simulation3D/data/region1.npy", region1 )
npySave("/Users/ben/desktop/work2/multiresolution/simulation3D/data/region2.npy", region2 )
Bmatrix = readMat(paste0('/users/ben/desktop/work2/multiresolution/sim2new_test2/Bmatrix.mat') )
dim(Bmatrix[[1]])
npySave("/Users/ben/desktop/work2/multiresolution/simulation3D/data/Bmatrix.npy",Bmatrix[[1]] )
hist(Bmatrix[[1]])
hist(Bmatrix[[1]][,1])
kernel
ker0 = readMat("/users/ben/desktop/work2/multiresolution/sim2new_test6/simdata3d_kn.mat")
85*0.2 + 75*0.3+75*0.3 + 90*0.2
90*0.2 + 78*0.3+75*0.3 + 85*0.2
90*0.2 + 78*0.3+75*0.3 + 82*0.2
95*0.2 + 78*0.3+75*0.3 + 85*0.2
95*0.2 + 78*0.3+85*0.3 + 85*0.2
85*0.2 + 84*0.3+80*0.3 + 95*0.2
89*0.2 + 90*0.3+89*0.3 + 95*0.2
92*0.2 + 88*0.3+89*0.3 + 95*0.2
a = rpois(1000,1.2)
mean(a)
sd(a)
var(a)
a = rpois(10000,1.2)
var(a)
mean(a)
qchisq(0.025,9999)
qchisq(0.025,9999,lower.tail = FALSE)
9999*var(a)/qchisq(0.025,9999)
9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
9999*var(a)/qchisq(0.975,9999,lower.tail = FALSE)
count  = 0
lambda = 1.2
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp1 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 1.2
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 1.2
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 1.2
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 2.9
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 2.9
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 29
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 29
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 0.9
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 0.9
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 0.9
for(i in 1:1000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 1000
count  = 0
lambda = 0.9
for(i in 1:3000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 3000
count  = 0
lambda = 0.9
for(i in 1:3000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 3000
count  = 0
lambda = 0.9
for(i in 1:3000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 3000
count  = 0
lambda = 0.9
for(i in 1:5000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 5000
count  = 0
lambda = 0.9
for(i in 1:5000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 5000
count  = 0
lambda = 0.1
for(i in 1:5000){
a = rpois(10000,lambda)
tmp1 = 9999*var(a)/qchisq(0.025,9999)
tmp2 = 9999*var(a)/qchisq(0.025,9999,lower.tail = FALSE)
if( (tmp1 > lambda) * (tmp2 < lambda) == 1 ){
count = count + 1
}
}
count / 5000
library(DICA)
data_path = system.file("extdata",package="DICA")
L_1 = oro.nifti::readNIfTI(paste0(data_path,"/dti_l1.nii.gz"))
L_2 = oro.nifti::readNIfTI(paste0(data_path,"/dti_l2.nii.gz"))
L_3 = oro.nifti::readNIfTI(paste0(data_path,"/dti_l3.nii.gz"))
V_1 = oro.nifti::readNIfTI(paste0(data_path,"/dti_v1.nii.gz"))
V_2 = oro.nifti::readNIfTI(paste0(data_path,"/dti_v2.nii.gz"))
V_3 = oro.nifti::readNIfTI(paste0(data_path,"/dti_v3.nii.gz"))
mask = (L_1!=0)
dtidata = get_dti(V_1,V_2,V_3,L_1,L_2,L_3,mask)
res_dti = dica(dtidata$X,K = 20,L =14,tol = 1e-3)
sqrt(5.7538446)
sqrt(56.753844)
60000/300
60000/300*100
60000/600
35+48
83*640*0.92
640*0.92
640*0.92*100
730*40
600*57
50/113
740*40
600*50
50*160
